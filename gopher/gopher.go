/*
 * Программа на Go состоит из пакетов - набора файлов с исходным кодом в
 * одной директории. Чтобы показать, что все файлы относятся к одному пакету,
 * мы указываем имя пакета в заголовке.
 * Внутри пакета мы можем получить доступ к любому объекту, вне зависимости от
 * файла, в котором находится исходный код. Однако за пределеми пакета мы имеем
 * доступ лишь к публичным структурам, интерфейсам, переменным, функциям и
 * константам. Имена таких объектов начинаются с большой буквы.
 * Мы вынесли этот код в отдельный пакет, чтобы вы могли наглядно увидеть в
 * используемой IDE публичные и приватные объекты. Кроме того, исходный код
 * этого пакета намеренно разделен на несколько файлов.
 * Все файлы в директории gopher относятся к одноименному пакету.
 */

package gopher // <= Имя пакета

// Gopher - структура, о них мы расскажем вам во втором модуле.
// Структуры позволяют группировать вместе связанные данные, а также
// поведение, которое реализовано в методах.
// Gopher публичная структура (ее имя начинается с большой буквы).
type Gopher struct {
	// Поля структуры Gopher.
	Name string  // Name - публичное поле, к нему можно обратиться за пределами пакета gopher.
	ver  float32 // ver - поле приватное, к нему можно обращаться только в пакете gopher
}

// Go - метод структуры Gopher, т.е. связанная с этим типом
// функция, имеющая доступ к ее приватным свойствам и методам.
func (g *Gopher) Go() error {
	if err := helloGopher(g.Name, g.ver); err != nil {
		return err
	}
	return helloWorld()
}

func NewGopher() *Gopher {
	return &Gopher{Name: "Gopher", ver: 1.14}
}
