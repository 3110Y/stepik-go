/*
 * Этот файл не будет содержать публичных структур. Довольно удобно спрятать от
 * конечного пользователя логику выполнения программы, создать для функций
 * необходимые тесты. Если в дальнейшем в коде будет обнаружена ошибка или мы захотим
 * немного изменить внутреннюю реализацию программы, мы сможем изменить реализацию
 * приватных объектов, но так, чтобы результат выполнения программы пользователя не
 * изменился.
 */

package gopher

import (
	"fmt"
	"io"
	"os"
)

// Эта функция принимает в качестве аргумента интерфейс io.Writer,
// о котором мы вам раскажем в дальнейшем, и записывает в него строку.
// В этом пакете есть пример того, как можно протестировать вывод
// программы текста на печать. Кроме того, функция показывает вариант
// обработки ошибки в Go. С обработкой ошибок мы также познакомим вас в
// рамках этого курса.
func helloWorld(buf io.Writer, say string) error {
	if _, err := fmt.Fprintf(buf, "%s\n", say); err != nil {
		return err
	}
	return nil
}

// gopherStruct - структура, и об этом мы расскажем вам во втором модуле,
type gopherStruct struct {
	// Поля структуры gopherStruct.

	// Name - публичное поле, к нему можно было бы обратиться за пределами
	// пакета gopher, если бы gopherStruct был публичным типом.
	Name string
	// ver - поле приватное, к нему можно обращаться только в пакете gopher
	ver float32
}

// Go - метод структуры gopherStruct, т.е. связанная с этим типом
// функция, имеющая доступ к ее приватным свойствам и методам.
func (g *gopherStruct) Go() error {
	// Здесь есть пример форматированного вывода на печать
	// Почитайте о нем здесь https://pkg.go.dev/fmt?tab=doc
	fmt.Printf("I am %s version %.2f\n", g.Name, g.ver)

	// А здесь мы используем функцию helloWorld, а в качестве аргумента передаем
	// ей os.Stdout - файл стандартного вывода (консоль). Заодно передаем
	// ошибку выше для обработки.
	return helloWorld(os.Stdout, "Hello, World!")
}

/*
 * NewGopher - публичная функция (я говорил, что их не будет в этом файле,
 * но пусть будет одна). Она создает gopherStruct и возвращает указатель на него.
 * Об указателях мы тоже расскажем.
 */
func NewGopher() Gopher {
	return &gopherStruct{Name: "Gopher", ver: 1.14}
}
